# genesis_engine/core/logging.py - CORREGIDO
"""
Sistema de Logging - CORREGIDO para Windows

FIXES:
- Removidos emojis que causaban 'charmap' codec error
- Configuraci√≥n UTF-8 expl√≠cita
- Fallback robusto para Rich logging
- Prefijos ASCII en lugar de emojis
"""

import logging
import sys
from typing import Optional

def get_logger(name: str = "genesis_engine") -> logging.Logger:
    """
    Obtener logger configurado para Genesis Engine
    
    Args:
        name: Nombre del logger
    
    Returns:
        Logger configurado
    """
    # Configurar logging b√°sico si no est√° configurado
    if not logging.getLogger().handlers:
        setup_basic_logging()
    
    return logging.getLogger(name)

def setup_basic_logging(level: str = "INFO"):
    """Configurar logging b√°sico - CORREGIDO para Windows"""
    try:
        from rich.logging import RichHandler
        from rich.console import Console
        
        # CORRECCI√ìN: Console con encoding UTF-8 expl√≠cito
        console = Console(
            file=sys.stdout,
            force_terminal=True,
            legacy_windows=False,
            _environ={"PYTHONIOENCODING": "utf-8"}
        )
        
        # Usar Rich handler si est√° disponible
        handler = RichHandler(
            console=console,
            show_time=True,
            show_path=False,
            rich_tracebacks=True,
            markup=False,  # NUEVO: Deshabilitar markup para evitar conflictos
            keywords=[]    # NUEVO: Evitar keywords problem√°ticos
        )
        format_str = "%(message)s"
        
    except ImportError:
        # Fallback a handler est√°ndar con encoding expl√≠cito
        handler = logging.StreamHandler(sys.stdout)
        handler.setEncoding('utf-8')  # CORRECCI√ìN: Encoding expl√≠cito
        format_str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    
    # Limpiar handlers existentes para evitar duplicados
    root_logger = logging.getLogger()
    for existing_handler in root_logger.handlers[:]:
        root_logger.removeHandler(existing_handler)
    
    # Configurar nuevo handler
    log_level = getattr(logging, level.upper(), logging.INFO)
    handler.setLevel(log_level)
    
    # CORRECCI√ìN: Formatter con encoding safe
    formatter = logging.Formatter(format_str)
    if hasattr(handler, 'setEncoding'):
        handler.setEncoding('utf-8')
    
    handler.setFormatter(formatter)
    
    # Configurar logger ra√≠z
    root_logger.setLevel(log_level)
    root_logger.addHandler(handler)

def setup_logging(level: str = "INFO", enable_rich: bool = True) -> logging.Logger:
    """
    Configurar logging para Genesis Engine con m√°s opciones - CORREGIDO
    
    Args:
        level: Nivel de logging (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        enable_rich: Habilitar Rich logging si est√° disponible
    
    Returns:
        Logger configurado
    """
    log_level = getattr(logging, level.upper(), logging.INFO)
    
    # Limpiar handlers existentes
    root_logger = logging.getLogger()
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # Configurar handler apropiado
    if enable_rich:
        try:
            from rich.logging import RichHandler
            from rich.console import Console
            
            # CORRECCI√ìN: Console con configuraci√≥n Windows-safe
            console = Console(
                file=sys.stdout,
                force_terminal=True,
                legacy_windows=False,
                width=120,  # NUEVO: Ancho fijo
                _environ={"PYTHONIOENCODING": "utf-8"}
            )
            
            handler = RichHandler(
                console=console,
                show_time=True,
                show_path=False,
                rich_tracebacks=True,
                markup=False,      # CORRECCI√ìN: Sin markup
                keywords=[],       # CORRECCI√ìN: Sin keywords problem√°ticos
                log_time_format="[%X]"  # CORRECCI√ìN: Formato simple
            )
            format_str = "%(message)s"
            
        except ImportError:
            handler = logging.StreamHandler(sys.stdout)
            handler.setEncoding('utf-8')
            format_str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    else:
        handler = logging.StreamHandler(sys.stdout)
        handler.setEncoding('utf-8')
        format_str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    
    handler.setLevel(log_level)
    
    # CORRECCI√ìN: Formatter seguro
    formatter = logging.Formatter(format_str)
    handler.setFormatter(formatter)
    
    # Configurar logger ra√≠z
    root_logger.setLevel(log_level)
    root_logger.addHandler(handler)
    
    # Configurar logger espec√≠fico de Genesis
    genesis_logger = logging.getLogger("genesis_engine")
    genesis_logger.setLevel(log_level)
    
    return genesis_logger

def safe_log_message(message: str) -> str:
    """
    NUEVA FUNCI√ìN: Convertir mensaje a ASCII-safe
    
    Reemplaza emojis por prefijos de texto para evitar encoding issues
    """
    emoji_replacements = {
        'üöÄ': '[INIT]',
        '‚úÖ': '[OK]',
        '‚ùå': '[ERROR]',
        'üîÑ': '[EXEC]',
        '‚ö†Ô∏è': '[WARN]',
        'üéØ': '[TARGET]',
        'üîß': '[FIX]',
        'üìù': '[DOC]',
        'üîç': '[SCAN]',
        '‚ö°': '[FAST]',
        'üèóÔ∏è': '[BUILD]',
        'üé®': '[UI]',
        'üê≥': '[DOCKER]',
        '‚ò∏Ô∏è': '[K8S]',
        'üìä': '[METRICS]',
        'üî•': '[HOT]',
        'üíæ': '[SAVE]',
        'üõë': '[STOP]',
        'üéº': '[ORCH]',
        'ü§ñ': '[AGENT]',
        'üìã': '[LIST]',
        'üìÑ': '[FILE]',
        'üéØ': '[GOAL]',
        'üõ†Ô∏è': '[TOOL]',
        'üìà': '[GROWTH]',
        'üîê': '[SECURE]',
        '‚è∞': '[TIME]',
        'üí°': '[IDEA]',
        'üåü': '[STAR]',
        'üö®': '[ALERT]',
        'üî¨': '[TEST]',
        'üìö': '[DOCS]',
        'üé™': '[DEMO]',
        'üèÜ': '[SUCCESS]',
        'üéä': '[COMPLETE]'
    }
    
    safe_message = message
    for emoji, replacement in emoji_replacements.items():
        safe_message = safe_message.replace(emoji, replacement)
    
    return safe_message

def get_safe_logger(name: str = "genesis_engine") -> logging.Logger:
    """
    NUEVA FUNCI√ìN: Obtener logger con mensajes ASCII-safe
    
    Wrapper que autom√°ticamente convierte emojis a prefijos ASCII
    """
    base_logger = get_logger(name)
    
    class SafeLoggerAdapter(logging.LoggerAdapter):
        def process(self, msg, kwargs):
            return safe_log_message(str(msg)), kwargs
    
    return SafeLoggerAdapter(base_logger, {})

# CORRECCI√ìN: Configurar logging b√°sico al importar el m√≥dulo con manejo de errores
try:
    setup_basic_logging()
except Exception as e:
    # Fallback b√°sico si falla la configuraci√≥n
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[logging.StreamHandler(sys.stdout)]
    )
    print(f"[WARN] Fallback logging activated due to: {e}")