"""
{{ entity_name }} Schemas
Generated by Genesis Engine at {{ generated_at }}
"""

from pydantic import BaseModel, EmailStr
from typing import Optional
from datetime import datetime
from uuid import UUID

class {{ entity_name }}Base(BaseModel):
    {% for attr_name, attr_type in attributes.items() %}
    {% if attr_name not in ['id', 'created_at', 'updated_at'] %}
    {{ attr_name }}: {% if attr_type == 'email' %}EmailStr{% else %}{{ attr_type|python_type }}{% endif %}{% if attr_type in ['string', 'email'] %} = None{% endif %}
    {% endif %}
    {% endfor %}

class {{ entity_name }}Create({{ entity_name }}Base):
    {% for attr_name, attr_type in attributes.items() %}
    {% if attr_name not in ['id', 'created_at', 'updated_at'] and attr_type in ['string', 'email'] %}
    {{ attr_name }}: {{ attr_type|python_type }}
    {% endif %}
    {% endfor %}

class {{ entity_name }}Update({{ entity_name }}Base):
    {% for attr_name, attr_type in attributes.items() %}
    {% if attr_name not in ['id', 'created_at', 'updated_at'] %}
    {{ attr_name }}: Optional[{% if attr_type == 'email' %}EmailStr{% else %}{{ attr_type|python_type }}{% endif %}] = None
    {% endif %}
    {% endfor %}

class {{ entity_name }}InDB({{ entity_name }}Base):
    id: UUID
    created_at: datetime
    updated_at: datetime

class {{ entity_name }}Response({{ entity_name }}InDB):
    pass

class {{ entity_name }}ListResponse(BaseModel):
    items: list[{{ entity_name }}Response]
    total: int
    page: int
    size: int
    pages: int
