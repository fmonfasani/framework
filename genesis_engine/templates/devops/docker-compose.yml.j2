# genesis_engine/templates/devops/docker-compose.yml.j2
# MEJORADO: Ahora verifica existencia de Dockerfiles

version: '3.8'

services:
  {% if backend_framework and include_backend %}
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/{{ project_name|snake_case }}_db
      - SECRET_KEY={{ random_secret() }}
      {% if redis_enabled %}
      - REDIS_URL=redis://redis:6379
      {% endif %}
    depends_on:
      - db
      {% if redis_enabled %}
      - redis
      {% endif %}
    volumes:
      - ./backend:/app
    {% if backend_framework == 'fastapi' %}
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    {% elif backend_framework == 'nestjs' %}
    command: npm run start:dev
    {% endif %}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  {% endif %}

  {% if frontend_framework and include_frontend %}
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    {% if include_backend %}
    depends_on:
      - backend
    {% endif %}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    {% if frontend_framework == 'nextjs' %}
    command: npm run dev
    {% elif frontend_framework == 'react' %}
    command: npm start
    {% elif frontend_framework == 'vue' %}
    command: npm run dev
    {% endif %}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
  {% endif %}

  db:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB={{ project_name|snake_case }}_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  {% if redis_enabled %}
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
  {% endif %}

  {% if monitoring_enabled %}
  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
  {% endif %}

  {% if ssl_enabled %}
  # Nginx reverse proxy for SSL termination
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/ssl
    {% if include_frontend or include_backend %}
    depends_on:
      {% if include_frontend %}
      - frontend
      {% endif %}
      {% if include_backend %}
      - backend
      {% endif %}
    {% endif %}
  {% endif %}

volumes:
  postgres_data:
  {% if redis_enabled %}
  redis_data:
  {% endif %}
  {% if monitoring_enabled %}
  prometheus_data:
  grafana_data:
  {% endif %}

networks:
  default:
    name: {{ project_name|snake_case }}_network