"""
{{ project_name }} - FastAPI Application
{{ description }}

Generated by Genesis Engine at {{ generated_at }}
"""

from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.security import HTTPBearer
import uvicorn

{% if database_enabled %}
from app.db.database import engine, get_db
from app.db.base import Base
{% endif %}

{% if auth_enabled %}
from app.auth.dependencies import get_current_user
from app.auth.router import router as auth_router
{% endif %}

{% for entity in entities %}
from app.routes.{{ entity.name|snake_case }} import router as {{ entity.name|snake_case }}_router
{% endfor %}

app = FastAPI(
    title="{{ project_name }}",
    description="{{ description }}",
    version="{{ version }}",
    docs_url="/docs",
    redoc_url="/redoc"
)

{% if cors_enabled %}
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
{% endif %}

app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=["*"]
)

{% if auth_enabled %}
security = HTTPBearer()
app.include_router(auth_router, prefix="/auth", tags=["Authentication"])
{% endif %}

{% for entity in entities %}
app.include_router(
    {{ entity.name|snake_case }}_router,
    prefix="/{{ entity.name|snake_case|plural }}",
    tags=["{{ entity.name|title|plural }}"]
)
{% endfor %}

@app.get("/")
async def root():
    return {
        "message": "Welcome to {{ project_name }}",
        "version": "{{ version }}",
        "docs": "/docs"
    }

@app.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": "{{ timestamp() }}"}

{% if database_enabled %}
@app.on_event("startup")
async def startup_event():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
{% endif %}

if __name__ == "__main__":
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )
