"""
{{ entity_name }} Model
Generated by Genesis Engine at {{ generated_at }}
"""

from sqlalchemy import Column, String, Integer, Boolean, DateTime, Text, Numeric
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.sql import func
import uuid
from app.db.base import Base

class {{ entity_name }}(Base):
    __tablename__ = "{{ table_name }}"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, index=True)

    {% for attr_name, attr_type in attributes.items() %}
    {% if attr_name not in ['id', 'created_at', 'updated_at'] %}
    {{ attr_name }} = Column({{ attr_type|sql_type }}, {% if attr_name == 'email' %}unique=True, {% endif %}{% if attr_type == 'string' %}nullable=False{% else %}nullable=True{% endif %})
    {% endif %}
    {% endfor %}

    created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)

    def __repr__(self):
        return f"<{{ entity_name }}(id={self.id}{% if 'name' in attributes %}, name={self.name}{% endif %})>"

    def to_dict(self):
        return {
            {% for attr_name, attr_type in attributes.items() %}
            "{{ attr_name }}": getattr(self, "{{ attr_name }}", None),
            {% endfor %}
            "created_at": self.created_at,
            "updated_at": self.updated_at
        }
